// datasource & generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum UserRole {
  STUDENT
  MENTOR
  ADMIN
}

enum TrackType {
  STARTUP_BUILDER
  SKILL_COLLABORATOR
}

enum SessionStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}

enum TxnType {
  EARN
  SPEND
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
}

// Models
model User {
  id               String              @id @default(cuid())
  email            String              @unique
  passwordHash     String
  role             UserRole            @default(STUDENT)
  isEmailVerified  Boolean             @default(false)
  kycOptional      Boolean             @default(false)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  deletedAt        DateTime?

  profile          Profile?
  mentorProfile    MentorProfile?
  enrollments      Enrollment[]
  progresses       Progress[]
  coins            SparkCoinTransaction[]
  notifications    Notification[]
  sessionsStudent  MentorshipSession[] @relation("SessionStudent")
  sessionsMentor   MentorshipSession[] @relation("SessionMentor")
  mentorSlots      MentorSlot[]
  projects         Project[]           @relation("ProjectOwner")
  payments         Payment[]
  badges           UserBadge[]
  deviceSessions   DeviceSession[]
  refreshTokens    RefreshToken[]
  otps             OTP[]
  auditLogs        AdminAuditLog[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  fullName  String
  avatarUrl String?
  locale    String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
}

model Track {
  id          String     @id @default(cuid())
  type        TrackType
  title       String
  description String?
  bannerUrl   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  sprints     Sprint[]
  enrollments Enrollment[]

  @@index([type])
}

model Sprint {
  id           String    @id @default(cuid())
  trackId      String
  title        String
  difficulty   String?
  prerequisites Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  track        Track     @relation(fields: [trackId], references: [id])
  modules      Module[]
  progresses   Progress[]

  @@index([trackId])
}

model Module {
  id         String   @id @default(cuid())
  sprintId   String
  title      String
  content    Json?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  sprint     Sprint   @relation(fields: [sprintId], references: [id])
  lessons    Lesson[]
}

model Lesson {
  id         String   @id @default(cuid())
  moduleId   String
  title      String
  body       Json?
  attachments Json?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  module     Module   @relation(fields: [moduleId], references: [id])
  quiz       Quiz?
}

model Quiz {
  id        String     @id @default(cuid())
  lessonId  String     @unique
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lesson    Lesson     @relation(fields: [lessonId], references: [id])
  questions Question[]
  submissions Submission[]
}

model Question {
  id        String   @id @default(cuid())
  quizId    String
  type      String   // MCQ | MULTI | SHORT
  prompt    String
  options   Json?
  answerKey Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model Submission {
  id         String   @id @default(cuid())
  quizId     String
  userId     String
  answers    Json
  score      Int?
  gradedAt   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([quizId, userId])
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  trackId    String
  status     String   @default("ACTIVE")
  joinedAt   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  user       User     @relation(fields: [userId], references: [id])
  track      Track    @relation(fields: [trackId], references: [id])

  @@unique([userId, trackId])
}

model Progress {
  id           String   @id @default(cuid())
  userId       String
  sprintId     String
  completion   Int      @default(0)
  xp           Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  user         User     @relation(fields: [userId], references: [id])
  sprint       Sprint   @relation(fields: [sprintId], references: [id])

  @@unique([userId, sprintId])
}

model SparkCoinTransaction {
  id         String   @id @default(cuid())
  userId     String
  type       TxnType
  reason     String
  amount     Int
  balance    Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model MentorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  expertiseAreas String[]
  rating         Float    @default(0)
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  slots          MentorSlot[]
}

model MentorSlot {
  id         String   @id @default(cuid())
  mentorId   String
  startTime  DateTime
  endTime    DateTime
  isBooked   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  mentor     User     @relation(fields: [mentorId], references: [id])
  session    MentorshipSession?

  @@index([mentorId, startTime])
}

model MentorshipSession {
  id           String        @id @default(cuid())
  studentId    String
  mentorId     String
  slotId       String?
  status       SessionStatus @default(PENDING)
  meetingLink  String?
  notes        String?
  rating       Int?
  scheduledFor DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  student      User          @relation("SessionStudent", fields: [studentId], references: [id])
  mentor       User          @relation("SessionMentor", fields: [mentorId], references: [id])
  slot         MentorSlot?   @relation(fields: [slotId], references: [id])
}

model Project {
  id         String   @id @default(cuid())
  ownerId    String
  name       String
  repoUrl    String?
  deckUrl    String?
  status     String   @default("DRAFT")
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  owner      User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  submissions ProjectSubmission[]
}

model DemoDayEvent {
  id         String   @id @default(cuid())
  title      String
  startsAt   DateTime
  endsAt     DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  submissions ProjectSubmission[]
}

model ProjectSubmission {
  id         String   @id @default(cuid())
  eventId    String
  projectId  String
  score      Int?
  judges     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  event      DemoDayEvent @relation(fields: [eventId], references: [id])
  project    Project     @relation(fields: [projectId], references: [id])

  @@unique([eventId, projectId])
}

model Badge {
  id         String   @id @default(cuid())
  code       String   @unique
  name       String
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userBadges UserBadge[]
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  awardedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  badge      Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

model Notification {
  id         String               @id @default(cuid())
  userId     String
  channel    NotificationChannel  @default(IN_APP)
  title      String
  body       String
  metadata   Json?
  readAt     DateTime?
  createdAt  DateTime             @default(now())
  user       User                 @relation(fields: [userId], references: [id])

  @@index([userId, readAt])
}

model Payment {
  id           String        @id @default(cuid())
  userId       String
  amount       Int
  currency     String        @default("INR")
  provider     String        @default("RAZORPAY")
  orderId      String?       @unique
  paymentId    String?       @unique
  status       PaymentStatus  @default(CREATED)
  metadata     Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entity     String?
  entityId   String?
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model DeviceSession {
  id         String   @id @default(cuid())
  userId     String
  userAgent  String?
  ip         String?
  lastSeenAt DateTime @default(now())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  revokedAt  DateTime?
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, expiresAt])
}

model OTP {
  id         String   @id @default(cuid())
  userId     String
  code       String
  purpose    String
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, purpose])
}